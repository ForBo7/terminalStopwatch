# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/stopwatch5.ipynb.

# %% auto 0
__all__ = ['TimeDisplay', 'Stopwatch', 'StopwatchApp']

# %% ../nbs/stopwatch5.ipynb 4
from time import monotonic

from textual.reactive import reactive
from textual.widgets import Static

# %% ../nbs/stopwatch5.ipynb 5
class TimeDisplay(Static):
    '''A widget to display elapsed time.'''

    # Both the attributes below will be available through `self`
    #  as if they were assigned in `__init__`.
    start_time = reactive(monotonic)
    time = reactive(0.)

    def on_mount(self) -> None:
        '''Event handler called when widget is added to the app.'''
        interval = 1/60
        self.set_interval(interval, self.update_time)
    
    def update_time(self) -> None:
        '''Method to update the time to the current time.'''
        self.time = monotonic() - self.start_time
    
    def watch_time(self, time: float) -> None:
        '''Called when the time attribute changes.'''
        mins, secs = divmod(time, 60)
        hrs, mins = divmod(mins, 60)
        self.update(f'{hrs:02.0f}:{mins:02.0f}:{secs:05.2f}')

# %% ../nbs/stopwatch5.ipynb 13
from textual.app import ComposeResult
from textual.widgets import Button

# %% ../nbs/stopwatch5.ipynb 14
class Stopwatch(Static):
    '''A stopwatch widget.'''

    def on_button_pressed(self, event: Button.Pressed) -> None:
        '''Even handler called when a button is pressed.'''
        if event.button.id == 'start': self.add_class('start')
        elif event.button.id == 'stop': self.remove_class('started')
    
    def compose(self) -> ComposeResult:
        '''Create child widgets of a stopwatch.'''
        yield Button('Start', id='start', variant='success')
        yield Button('Stop', id='stop', variant='error')
        yield Button('Reset', id='reset')
        yield TimeDisplay()

# %% ../nbs/stopwatch5.ipynb 19
from textual.app import App
from textual.containers import Container
from textual.widgets import Header, Footer

# %% ../nbs/stopwatch5.ipynb 20
class StopwatchApp(App):
    '''A Textual app to manage stopwatches.'''

    CSS_PATH = '../css/stopwatch4.css'
    BINDINGS = [('d', 'toggle_dark', 'Toggle dark mode')]

    def compose(self) -> ComposeResult:
        '''Create child widgets for the app.'''
        yield Header()
        yield Footer()
        yield Container(Stopwatch(), Stopwatch(), Stopwatch())
    
    def action_toggle_dark(self) -> None:
        '''An action to toggle dark mode.'''
        self.dark = not self.dark

# %% ../nbs/stopwatch5.ipynb 25
#| eval: false
try: from nbdev.imports import IN_NOTEBOOK
except: IN_NOTEBOOK = False

if __name__ == '__main__' and not IN_NOTEBOOK:
    app = StopwatchApp()
    app.run()
